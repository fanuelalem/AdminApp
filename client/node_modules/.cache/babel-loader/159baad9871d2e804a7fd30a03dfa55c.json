{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar pause = require('pause'),\n    util = require('util'),\n    Strategy = require('passport-strategy');\n/**\n * `SessionStrategy` constructor.\n *\n * @api public\n */\n\n\nfunction SessionStrategy(options, deserializeUser) {\n  if (typeof options == 'function') {\n    deserializeUser = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  Strategy.call(this);\n  this.name = 'session';\n  this._deserializeUser = deserializeUser;\n}\n/**\n * Inherit from `Strategy`.\n */\n\n\nutil.inherits(SessionStrategy, Strategy);\n/**\n * Authenticate request based on the current session state.\n *\n * The session authentication strategy uses the session to restore any login\n * state across requests.  If a login session has been established, `req.user`\n * will be populated with the current user.\n *\n * This strategy is registered automatically by Passport.\n *\n * @param {Object} req\n * @param {Object} options\n * @api protected\n */\n\nSessionStrategy.prototype.authenticate = function (req, options) {\n  if (!req._passport) {\n    return this.error(new Error('passport.initialize() middleware not in use'));\n  }\n\n  options = options || {};\n  var self = this,\n      su;\n\n  if (req._passport.session) {\n    su = req._passport.session.user;\n  }\n\n  if (su || su === 0) {\n    // NOTE: Stream pausing is desirable in the case where later middleware is\n    //       listening for events emitted from request.  For discussion on the\n    //       matter, refer to: https://github.com/jaredhanson/passport/pull/106\n    var paused = options.pauseStream ? pause(req) : null;\n\n    this._deserializeUser(su, req, function (err, user) {\n      if (err) {\n        return self.error(err);\n      }\n\n      if (!user) {\n        delete req._passport.session.user;\n      } else {\n        // TODO: Remove instance access\n        var property = req._passport.instance._userProperty || 'user';\n        req[property] = user;\n      }\n\n      self.pass();\n\n      if (paused) {\n        paused.resume();\n      }\n    });\n  } else {\n    self.pass();\n  }\n};\n/**\n * Expose `SessionStrategy`.\n */\n\n\nmodule.exports = SessionStrategy;","map":null,"metadata":{},"sourceType":"script"}