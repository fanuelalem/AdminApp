{"ast":null,"code":"const {\n  isEmail,\n  isLength\n} = require('validator');\n\nconst jwt = require('jwt-simple');\n\nconst {\n  User\n} = require('./../models');\n\nconst {\n  secret\n} = require('../config');\n\nfunction tokenForUser(user) {\n  // 1st argument is the information we want to encode\n  // 2nd argument is the secret we are going to use to encrypt it\n  // By convention all json web tokens have a sub property\n  // by sub we mean subject. As in who does this token belong to?\n  // iat or issued at time is another convention by  jwt\n  const timeStamp = new Date().getTime(); // This subject will become the payload in our strategy\n  // eslint-disable-next-line no-underscore-dangle\n\n  return jwt.encode({\n    sub: user._id,\n    iat: timeStamp\n  }, process.env.SECRET || secret);\n}\n\nmodule.exports = {\n  signUp: async (req, res) => {\n    const {\n      email,\n      password\n    } = req.body;\n    console.log(req.body, 'cdc');\n\n    if (!email || !password) {\n      return res.status(400).json({\n        error: 'You must provide email and password'\n      });\n    }\n\n    if (!isEmail(email)) {\n      return res.status(403).json({\n        error: 'You must provide a valid email address'\n      });\n    }\n\n    if (!isLength(password, {\n      min: 6\n    })) {\n      return res.status(403).json({\n        error: 'Your password must be at least 6 characters long'\n      });\n    }\n\n    try {\n      // See if a user with the given email exists\n      const existingUser = await User.findOne({\n        email\n      });\n\n      if (existingUser) {\n        return res.status(403).json({\n          error: 'User already exists'\n        });\n      }\n\n      const user = await new User({\n        email,\n        password\n      }).save();\n      const currentUser = await User.findById(user._id).select('-password'); // Eventually we will send a token\n      // return res.status(200).json(user)\n\n      return res.json({\n        token: tokenForUser(user),\n        user: currentUser\n      });\n    } catch (e) {\n      console.log(e);\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  signIn: (req, res) => {\n    // console.log('signing in...')\n    return res.json({\n      token: tokenForUser(req.user),\n      user: currentUser\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}