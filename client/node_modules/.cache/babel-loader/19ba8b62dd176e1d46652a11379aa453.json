{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _validators = _interopRequireDefault(require(\"./validators\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar numericality = (0, _helpers.memoize)(function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _int = _ref[\"int\"],\n      integer = _ref.integer,\n      even = _ref.even,\n      odd = _ref.odd,\n      equal = _ref['='],\n      equalTo = _ref.equalTo,\n      diff = _ref['!='],\n      otherThan = _ref.otherThan,\n      greater = _ref['>'],\n      greaterThan = _ref.greaterThan,\n      less = _ref['<'],\n      lessThan = _ref.lessThan,\n      greaterOrEqual = _ref['>='],\n      greaterThanOrEqualTo = _ref.greaterThanOrEqualTo,\n      lessOrEqual = _ref['<='],\n      lessThanOrEqualTo = _ref.lessThanOrEqualTo,\n      message = _ref.message,\n      msg = _ref.msg,\n      ifCond = _ref[\"if\"],\n      unless = _ref.unless,\n      allowBlank = _ref.allowBlank;\n\n  msg = msg || message;\n  _int = _int || integer;\n  equal = (0, _helpers.selectNum)(equal, equalTo);\n  diff = (0, _helpers.selectNum)(diff, otherThan);\n  greater = (0, _helpers.selectNum)(greater, greaterThan);\n  greaterOrEqual = (0, _helpers.selectNum)(greaterOrEqual, greaterThanOrEqualTo);\n  less = (0, _helpers.selectNum)(less, lessThan);\n  lessOrEqual = (0, _helpers.selectNum)(lessOrEqual, lessThanOrEqualTo);\n  return (0, _helpers.prepare)(ifCond, unless, allowBlank, function (value) {\n    if (!(0, _helpers.isNumber)(value)) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'notANumber', 'NaN'));\n    }\n\n    if (_int && +value % 1) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'notAnInteger', 'int'));\n    }\n\n    if (equal !== null && +value !== equal) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'equalTo', '=', {\n        count: equal\n      }));\n    }\n\n    if (diff !== null && +value === diff) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'otherThan', '!=', {\n        count: diff\n      }));\n    }\n\n    if (greater !== null && +value <= greater) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'greaterThan', '>', {\n        count: greater\n      }));\n    }\n\n    if (greaterOrEqual !== null && +value < greaterOrEqual) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'greaterThanOrEqualTo', '>=', {\n        count: greaterOrEqual\n      }));\n    }\n\n    if (less !== null && +value >= less) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'lessThan', '<', {\n        count: less\n      }));\n    }\n\n    if (lessOrEqual !== null && +value > lessOrEqual) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'lessThanOrEqualTo', '<=', {\n        count: lessOrEqual\n      }));\n    }\n\n    if (even && (0, _helpers.trunc)(+value) % 2) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'even'));\n    }\n\n    if (odd && !((0, _helpers.trunc)(+value) % 2)) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'odd'));\n    }\n  });\n});\nvar _default = numericality;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}