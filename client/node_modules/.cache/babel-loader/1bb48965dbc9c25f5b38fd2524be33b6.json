{"ast":null,"code":"var passport = require('passport-strategy'),\n    auth_hdr = require('./auth_header'),\n    util = require('util'),\n    url = require('url'),\n    assign = require('./helpers/assign.js');\n/**\n * Strategy constructor\n *\n * @param options\n *          secretOrKey: String or buffer containing the secret or PEM-encoded public key. Required unless secretOrKeyProvider is provided.\n *          secretOrKeyProvider: callback in the format secretOrKeyProvider(request, rawJwtToken, done)`,\n *                               which should call done with a secret or PEM-encoded public key\n *                               (asymmetric) for the given undecoded jwt token string and  request\n *                               combination. done has the signature function done(err, secret).\n *                               REQUIRED unless `secretOrKey` is provided.\n *          jwtFromRequest: (REQUIRED) Function that accepts a reqeust as the only parameter and returns the either JWT as a string or null\n *          issuer: If defined issuer will be verified against this value\n *          audience: If defined audience will be verified against this value\n *          algorithms: List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\n *          ignoreExpiration: if true do not validate the expiration of the token.\n *          passReqToCallback: If true the, the verify callback will be called with args (request, jwt_payload, done_callback).\n * @param verify - Verify callback with args (jwt_payload, done_callback) if passReqToCallback is false,\n *                 (request, jwt_payload, done_callback) if true.\n */\n\n\nfunction JwtStrategy(options, verify) {\n  passport.Strategy.call(this);\n  this.name = 'jwt';\n  this._secretOrKeyProvider = options.secretOrKeyProvider;\n\n  if (options.secretOrKey) {\n    if (this._secretOrKeyProvider) {\n      throw new TypeError('JwtStrategy has been given both a secretOrKey and a secretOrKeyProvider');\n    }\n\n    this._secretOrKeyProvider = function (request, rawJwtToken, done) {\n      done(null, options.secretOrKey);\n    };\n  }\n\n  if (!this._secretOrKeyProvider) {\n    throw new TypeError('JwtStrategy requires a secret or key');\n  }\n\n  this._verify = verify;\n\n  if (!this._verify) {\n    throw new TypeError('JwtStrategy requires a verify callback');\n  }\n\n  this._jwtFromRequest = options.jwtFromRequest;\n\n  if (!this._jwtFromRequest) {\n    throw new TypeError('JwtStrategy requires a function to retrieve jwt from requests (see option jwtFromRequest)');\n  }\n\n  this._passReqToCallback = options.passReqToCallback;\n  var jsonWebTokenOptions = options.jsonWebTokenOptions || {}; //for backwards compatibility, still allowing you to pass\n  //audience / issuer / algorithms / ignoreExpiration\n  //on the options.\n\n  this._verifOpts = assign({}, jsonWebTokenOptions, {\n    audience: options.audience,\n    issuer: options.issuer,\n    algorithms: options.algorithms,\n    ignoreExpiration: !!options.ignoreExpiration\n  });\n}\n\nutil.inherits(JwtStrategy, passport.Strategy);\n/**\n * Allow for injection of JWT Verifier.\n *\n * This improves testability by allowing tests to cleanly isolate failures in the JWT Verification\n * process from failures in the passport related mechanics of authentication.\n *\n * Note that this should only be replaced in tests.\n */\n\nJwtStrategy.JwtVerifier = require('./verify_jwt');\n/**\n * Authenticate request based on JWT obtained from header or post body\n */\n\nJwtStrategy.prototype.authenticate = function (req, options) {\n  var self = this;\n\n  var token = self._jwtFromRequest(req);\n\n  if (!token) {\n    return self.fail(new Error(\"No auth token\"));\n  }\n\n  this._secretOrKeyProvider(req, token, function (secretOrKeyError, secretOrKey) {\n    if (secretOrKeyError) {\n      self.fail(secretOrKeyError);\n    } else {\n      // Verify the JWT\n      JwtStrategy.JwtVerifier(token, secretOrKey, self._verifOpts, function (jwt_err, payload) {\n        if (jwt_err) {\n          return self.fail(jwt_err);\n        } else {\n          // Pass the parsed token to the user\n          var verified = function (err, user, info) {\n            if (err) {\n              return self.error(err);\n            } else if (!user) {\n              return self.fail(info);\n            } else {\n              return self.success(user, info);\n            }\n          };\n\n          try {\n            if (self._passReqToCallback) {\n              self._verify(req, payload, verified);\n            } else {\n              self._verify(payload, verified);\n            }\n          } catch (ex) {\n            self.error(ex);\n          }\n        }\n      });\n    }\n  });\n};\n/**\n * Export the Jwt Strategy\n */\n\n\nmodule.exports = JwtStrategy;","map":null,"metadata":{},"sourceType":"script"}