{"ast":null,"code":"const {\n  User,\n  Stock,\n  Image\n} = require('../models/index');\n\nmodule.exports = {\n  addStock: async (req, res) => {\n    const {\n      text\n    } = req.body;\n    console.log(req.body, 'text??');\n\n    if (!text) {\n      return res.status(400).json({\n        error: 'You must provide text'\n      });\n    }\n\n    try {\n      const newStock = await new Stock({\n        text,\n        user: req.user._id\n      }).save(); // const newStock = await Stock.create({ text, user: req.user._id });\n\n      req.user.myStocks.push(newStock);\n      await req.user.save();\n      return res.status(200).json(newStock);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  //  addUpload: async (req, res) => {\n  //     const { name } = req.body;\n  //     console.log(req.body,'this req.body')\n  //     try {\n  //       const newUpload = await new Upload({ name,type, user: req.user._id }).save();\n  //   console.log(newUpload,'sdsc')\n  //       // const newStock = await Stock.create({ text, user: req.user._id });\n  //       req.user.myUploads.push(newUpload);\n  //       await req.user.save();\n  //       return res.status(200).json(newUpload);\n  //     } catch (e) {\n  //       return res.status(403).json({ e });\n  //     }\n  //   }\n  getUserByEmail: async (req, res) => {\n    try {\n      const users = await User.find();\n\n      if (!users) {\n        return res.status(404).json({\n          error: 'no user found'\n        });\n      }\n\n      return res.status(200).json(users);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  getAllUserEmails: async (req, res) => {\n    try {\n      const userEmail = await User.findOne({\n        email: req.query.email\n      }, 'email');\n      return res.status(200).json(userEmail);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  // getAllUserEmails: async (req, res) => {\n  //   try {\n  //     const userEmail = await User.findOne({ email: req.query.email }, 'email');\n  //     return res.status(200).json(userEmail);\n  //   } catch (e) {\n  //     return res.status(403).json({ e });\n  //   }\n  // },\n  getUserStocks: async (req, res) => {\n    try {\n      // const user = await User.findById(req.user._id).populate('todos','text');\n      // return res.status(200).json(user.stocks)\n      const stocks = await Stock.find({\n        user: req.user._id\n      });\n      return res.json(stocks);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  getMyImages: async (req, res) => {\n    try {\n      const images = await Image.find({\n        user: req.user._id\n      });\n      return res.json(images);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    } // const user = await User.findById(req.user._id).populate('todos','text');\n    // return res.status(200).json(user.stocks)\n\n  },\n  // postMyImages: async (req, res) => {\n  //   const { fileName } = req.body;\n  //   console.log(req.body,'image info')\n  //   if (!fileName) {\n  //     return res.status(400).json({ error: 'You must provide name' });\n  //   }\n  //   try {\n  //     const newImage = await new Image({ fileName, user: req.user._id }).save();\n  //     // const newStock = await Stock.create({ text, user: req.user._id });\n  //     req.user.myImages.push(newImage);\n  //     await req.user.save();\n  //     return res.status(200).json(newImage);\n  //   } catch (e) {\n  //     return res.status(403).json({ e });\n  //   }\n  // }\n  postMyImages: async (req, res) => {\n    console.log(req.files);\n\n    if (req.files === null) {\n      return res.status(400).json({\n        msf: 'no file uploaded'\n      });\n    }\n\n    const file = req.files.file;\n    file.mv(`${__dirname}/images/${file.name}`, err => {\n      if (err) {\n        console.error(err);\n        return res.status(500).send(err);\n      }\n\n      res.json({\n        fileName: file.name,\n        filePath: `./images/${file.name}`\n      });\n    }); //  const {file}=req.file\n    //  console.log(req.file,'image info')\n    //  const {file}=req.file\n    //  const {data} = req.file\n    //  console.log(req.body)\n    // if (!fileName) {\n    //   return res.status(400).json({ error: 'You must provide name' });\n    // }\n    // try {\n    //   const newImage = await new Image({ data, user: req.user._id }).save();\n    //   // const newStock = await Stock.create({ text, user: req.user._id });\n    //   req.user.myImages.push(newImage);\n    //   await req.user.save();\n    //   return res.status(200).json({newImage});\n    // } catch (e) {\n    //   return res.status(403).json({ e });\n    // }\n  },\n  deleteUserStockById: async (req, res) => {\n    // grab stockId from req.params\n    const {\n      stockId\n    } = req.params;\n\n    try {\n      // First find the todo by Id\n      const stockToDelete = await Stock.findById(stockId);\n\n      if (!stockToDelete) {\n        return res.status(401).json({\n          error: 'No todo with that Id'\n        });\n      } // console.log('current logged in users id', req.user._id)\n      // console.log('id of the user that the todo belongs to', stockToDelete.user)\n      // return res.status(200).json('hello')\n      // Check if the todo does not belong to the user.\n      // if it doesnt, do not allow the user to delete it\n\n\n      if (req.user._id.toString() !== stockToDelete.user.toString()) {\n        return res.status(401).json({\n          error: \"You cannot delete a todo that's not yours\"\n        });\n      } //  otherwise, delete the todo\n\n\n      const deletedStock = await Stock.findByIdAndDelete(stockId); // Respond back with the deleted todo\n\n      return res.json(deletedStock);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  getUsers: async (req, res) => {\n    try {\n      const users = await User.find();\n      return res.status(200).json(users);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  },\n  updateStockById: async (req, res) => {\n    //   Grab stockId from params\n    const {\n      stockId\n    } = req.params; //  grab text and completed from the database\n\n    const {\n      text,\n      completed\n    } = req.body; // if(!text){\n    //   return res.status(400).json({error:'you must provide a text'})\n    // }\n\n    try {\n      const stockToUpdate = await Stock.findById(stockId);\n\n      if (!stockToUpdate) {\n        return res.status(404).json({\n          error: 'No todo with that Id'\n        });\n      }\n\n      if (req.user._id.toString() !== stockToUpdate.user.toString()) {\n        return res.status(401).json({\n          error: \"You cannot update a todo that's not yours\"\n        });\n      }\n\n      const updatedStock = await Stock.findByIdAndUpdate(stockId, {\n        completed,\n        text\n      }, {\n        new: true\n      });\n      return res.json(updatedStock);\n    } catch (e) {\n      return res.status(403).json({\n        e\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}