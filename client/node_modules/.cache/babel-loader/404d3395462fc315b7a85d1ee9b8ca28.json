{"ast":null,"code":"const crypto = require('crypto');\n\nconst {\n  debugLog\n} = require('./utilities');\n/**\n * memHandler - In memory upload handler\n * @param {Object} options\n * @param {String} fieldname\n * @param {String} filename\n * @returns {Object}\n */\n\n\nmodule.exports = (options, fieldname, filename) => {\n  const buffers = [];\n  const hash = crypto.createHash('md5');\n  let fileSize = 0;\n  let completed = false;\n\n  const getBuffer = () => Buffer.concat(buffers, fileSize);\n\n  return {\n    dataHandler: data => {\n      if (completed === true) {\n        debugLog(options, `Error: got ${fieldname}->${filename} data chunk for completed upload!`);\n        return;\n      }\n\n      buffers.push(data);\n      hash.update(data);\n      fileSize += data.length;\n      debugLog(options, `Uploading ${fieldname}->${filename}, bytes:${fileSize}...`);\n    },\n    getBuffer: getBuffer,\n    getFilePath: () => '',\n    getFileSize: () => fileSize,\n    getHash: () => hash.digest('hex'),\n    complete: () => {\n      debugLog(options, `Upload ${fieldname}->${filename} completed, bytes:${fileSize}.`);\n      completed = true;\n      return getBuffer();\n    },\n    cleanup: () => {\n      completed = true;\n    },\n    getWritePromise: () => Promise.resolve()\n  };\n};","map":null,"metadata":{},"sourceType":"script"}