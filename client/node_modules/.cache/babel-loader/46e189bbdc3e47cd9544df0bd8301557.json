{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _messages = _interopRequireDefault(require(\"./messages\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DEFAULT_OPTIONS = {\n  memoize: true,\n  allowBlank: false,\n  urlProtocols: ['http', 'https'],\n  dateFormat: 'yyyy-mm-dd',\n  // ISO\n  dateYmd: 'ymd',\n  accept: ['1', 'true'],\n  caseSensitive: true // confirmation, inclusion, exclusion\n\n};\nvar Validators = {\n  formatMessage: formatMessage,\n  formatSize: formatSize,\n  defaultOptions: DEFAULT_OPTIONS,\n  messages: _messages[\"default\"],\n  pluralRules: {\n    0: 'zero',\n    1: 'one'\n  }\n};\nvar _default = Validators;\nexports[\"default\"] = _default;\n\nfunction formatSize(size, unit) {\n  return size + ' ' + unit;\n}\n\nfunction formatMessage(msg) {\n  if (msg.props) {\n    msg = msg.props;\n  }\n\n  var text = msg.defaultMessage || msg.id ||\n  /* istanbul ignore next */\n  '';\n  var rules = Validators.pluralRules;\n  return !msg.values ? text : parseMsg(text, function (part) {\n    var parts = part.split(',');\n    var count = msg.values[parts[0]]; // {value} OR {count, number}\n\n    if (parts.length <= 2) {\n      return count == null ? '' : '' + count;\n    } // plural\n\n\n    var plural = parts.slice(2).join(',').trim();\n    var info = {};\n    var result = parseMsg(plural, null, rules[+count] || 'other', info);\n    return info.found ? result : parseMsg(plural, null, 'other', {});\n  });\n}\n\nfunction parseMsg(msg, func, pattern, info) {\n  var start = msg.indexOf('{');\n  if (start < 0) return pattern ? '' : msg;\n  var index = start;\n  var count = 1;\n  var len = msg.length;\n\n  while (count > 0 && index < len) {\n    ++index;\n\n    if (msg.charAt(index) === '{') {\n      ++count;\n    }\n\n    if (msg.charAt(index) === '}') {\n      --count;\n    }\n  }\n\n  if (pattern) {\n    if (pattern === msg.slice(0, start).trim()) {\n      info.found = true;\n      return msg.slice(start + 1, index).trim();\n    }\n\n    return parseMsg(msg.slice(index + 1), null, pattern, info);\n  } // func gets all '{.*}' parts\n  // e.g:\n  // - {count}\n  // - {count, plural, one {1 thing} other {many things}}\n  // - ...\n\n\n  return msg.slice(0, start) + parseMsg(func(msg.slice(start + 1, index).trim()), func) + parseMsg(msg.slice(index + 1), func);\n}","map":null,"metadata":{},"sourceType":"script"}