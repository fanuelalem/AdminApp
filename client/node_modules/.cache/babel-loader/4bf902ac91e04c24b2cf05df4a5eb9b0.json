{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _validators = _interopRequireDefault(require(\"./validators\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // user:pass BasicAuth (optional)\n\n\nvar BASIC_AUTH = '(?:\\\\S+(?::\\\\S*)?@)?'; // IP address dotted notation octets\n\nvar IPV4 = '(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)'; // the IPv6 matching part is from here: https://gist.github.com/syzdek/6086792\n// IPv6 address in URLs are wrapped with []s\n\nvar IPV6 = \"\\\\[(?:\" + [// 1:2:3:4:5:6:7:8\n'(?:[\\\\da-f]{1,4}:){7,7}[\\\\da-f]{1,4}', // 2001:db8:3:4::192.0.2.33  64:ff9b::192.0.2.33  (IPv4-Embedded IPv6 Address)\n'(?:[\\\\da-f]{1,4}:){1,4}:' + IPV4, // ::255.255.255.255  ::ffff:255.255.255.255  ::ffff:0:255.255.255.255  (IPv4-mapped IPv6 addresses)\n'::(?:ffff(?::0{1,4}){0,1}:){0,1}' + IPV4, // 1::3:4:5:6:7:8  1::3:4:5:6:7:8 1::8\n'[\\\\da-f]{1,4}:(?:(?::[\\\\da-f]{1,4}){1,6})', // 1::4:5:6:7:8  1:2::4:5:6:7:8  1:2::8\n'(?:[\\\\da-f]{1,4}:){1,2}(?::[\\\\da-f]{1,4}){1,5}', // 1::5:6:7:8  1:2:3::5:6:7:8  1:2:3::8\n'(?:[\\\\da-f]{1,4}:){1,3}(?::[\\\\da-f]{1,4}){1,4}', // 1::6:7:8  1:2:3:4::6:7:8  1:2:3:4::8\n'(?:[\\\\da-f]{1,4}:){1,4}(?::[\\\\da-f]{1,4}){1,3}', // 1::7:8  1:2:3:4:5::7:8  1:2:3:4:5::8\n'(?:[\\\\da-f]{1,4}:){1,5}(?::[\\\\da-f]{1,4}){1,2}', // 1::8  1:2:3:4:5:6::8  1:2:3:4:5:6::8\n'(?:[\\\\da-f]{1,4}:){1,6}:[\\\\da-f]{1,4}', // 1::\n'(?:[\\\\da-f]{1,4}:){1,7}:', // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8  ::\n':(?:(?::[\\\\da-f]{1,4}){1,7}|:)'].join('|') + ')\\\\]'; // host & domain names, may end with dot\n\nvar HOST = // can be replaced by\n// '(?:(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+' +\n\"(?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\" + // TLD identifier name, may end with dot\n\"(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)\"; // port number (optional)\n\nvar PORT = '(?::\\\\d{2,5})?'; // resource path (optional)\n\nvar PATH = '(?:[/][^\\\\s?#]*)?';\nvar SEARCH = '(?:[?][^\\\\s#]*)?';\nvar HASH = '(?:[#]\\\\S*)?';\nvar DEFAULT_OPTIONS = {\n  emptyProtocol: true,\n  protocolIdentifier: true,\n  basicAuth: true,\n  local: true,\n  ipv4: true,\n  ipv6: true,\n  host: true,\n  port: true,\n  path: true,\n  search: true,\n  hash: true\n};\nvar STRIP_PROTOCOL_REG = /:?\\/\\/$/;\nvar CLEAN_UP_PROPS = ['protocol', 'ipv4', 'host', 'path', 'search', 'hash'];\n\nfunction parseURL(url, options) {\n  options = defaultOptions(options);\n  var parts = url.match(buildReg(options, true));\n  if (!parts) return null;\n  var group = 1;\n  var h = {\n    protocol: parts[group++].replace(STRIP_PROTOCOL_REG, '')\n  };\n\n  if (options.basicAuth) {\n    var auth = parts[group++];\n\n    if (auth) {\n      var password = auth.slice(0, -1).split(':');\n      var username = password.shift();\n      h.basicAuth = {\n        username: username,\n        password: password.length ? password.join(':') : void 0\n      };\n    }\n  }\n\n  if (options.ipv4) h.ipv4 = parts[group++];\n\n  if (options.ipv6) {\n    var ipv6 = parts[group++];\n    if (ipv6) h.ipv6 = ipv6.slice(1, -1);\n  }\n\n  if (options.host) h.host = parts[group++];\n  if (options.local) h.host = parts[group++] || h.host;\n\n  if (options.port) {\n    var port = parts[group++];\n    if (port) h.port = +port.slice(1);\n  }\n\n  if (options.path) h.path = parts[group++];\n  if (options.search) h.search = parts[group++];\n  if (options.hash) h.hash = parts[group++]; // Clean up\n\n  CLEAN_UP_PROPS.forEach(function (k) {\n    if (!h[k]) delete h[k];\n  });\n  return h;\n} // Uses \"format\" internally which is already memoized\n\n\nvar url = (0, _helpers.regFormat)(function (options) {\n  return buildReg(defaultOptions(options), false);\n}, 'url');\nurl.parseURL = parseURL;\nvar _default = url;\nexports[\"default\"] = _default;\n\nfunction defaultOptions(options) {\n  options = (0, _helpers.assign)({}, DEFAULT_OPTIONS, options);\n  options.protocols = [].concat(options.protocol || options.protocols || _validators[\"default\"].defaultOptions.urlProtocols).join('|');\n  return options;\n}\n\nfunction group(option, regPart, capture) {\n  return option ? capture ? \"(\".concat(regPart, \")\") : regPart : '';\n}\n\nfunction buildReg(options, capture) {\n  return new RegExp('^' + group(true, \"(?:(?:(?:\".concat(options.protocols, \"):)\").concat(options.emptyProtocol ? '?' : '', \"\\\\/\\\\/)\").concat(options.protocolIdentifier ? '' : '?'), capture) + group(options.basicAuth, BASIC_AUTH, capture) + \"(?:\".concat([group(options.ipv4, IPV4, capture), group(options.ipv6, IPV6, capture), group(options.host, HOST, capture), group(options.local, 'localhost', capture)].filter(function (g) {\n    return g;\n  }).join('|'), \")\") + group(options.port, PORT, capture) + group(options.path, PATH, capture) + group(options.search, SEARCH, capture) + group(options.hash, HASH, capture) + '$', 'i');\n}","map":null,"metadata":{},"sourceType":"script"}