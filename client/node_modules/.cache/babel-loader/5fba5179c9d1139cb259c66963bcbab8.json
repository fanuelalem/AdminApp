{"ast":null,"code":"\"use strict\";\n\nvar url = require('url'),\n    auth_hdr = require('./auth_header'); // Note: express http converts all headers\n// to lower case.\n\n\nvar AUTH_HEADER = \"authorization\",\n    LEGACY_AUTH_SCHEME = \"JWT\",\n    BEARER_AUTH_SCHEME = 'bearer';\nvar extractors = {};\n\nextractors.fromHeader = function (header_name) {\n  return function (request) {\n    var token = null;\n\n    if (request.headers[header_name]) {\n      token = request.headers[header_name];\n    }\n\n    return token;\n  };\n};\n\nextractors.fromBodyField = function (field_name) {\n  return function (request) {\n    var token = null;\n\n    if (request.body && Object.prototype.hasOwnProperty.call(request.body, field_name)) {\n      token = request.body[field_name];\n    }\n\n    return token;\n  };\n};\n\nextractors.fromUrlQueryParameter = function (param_name) {\n  return function (request) {\n    var token = null,\n        parsed_url = url.parse(request.url, true);\n\n    if (parsed_url.query && Object.prototype.hasOwnProperty.call(parsed_url.query, param_name)) {\n      token = parsed_url.query[param_name];\n    }\n\n    return token;\n  };\n};\n\nextractors.fromAuthHeaderWithScheme = function (auth_scheme) {\n  var auth_scheme_lower = auth_scheme.toLowerCase();\n  return function (request) {\n    var token = null;\n\n    if (request.headers[AUTH_HEADER]) {\n      var auth_params = auth_hdr.parse(request.headers[AUTH_HEADER]);\n\n      if (auth_params && auth_scheme_lower === auth_params.scheme.toLowerCase()) {\n        token = auth_params.value;\n      }\n    }\n\n    return token;\n  };\n};\n\nextractors.fromAuthHeaderAsBearerToken = function () {\n  return extractors.fromAuthHeaderWithScheme(BEARER_AUTH_SCHEME);\n};\n\nextractors.fromExtractors = function (extractors) {\n  if (!Array.isArray(extractors)) {\n    throw new TypeError('extractors.fromExtractors expects an array');\n  }\n\n  return function (request) {\n    var token = null;\n    var index = 0;\n\n    while (!token && index < extractors.length) {\n      token = extractors[index].call(this, request);\n      index++;\n    }\n\n    return token;\n  };\n};\n/**\n * This extractor mimics the behavior of the v1.*.* extraction logic.\n *\n * This extractor exists only to provide an easy transition from the v1.*.* API to the v2.0.0\n * API.\n *\n * This extractor first checks the auth header, if it doesn't find a token there then it checks the \n * specified body field and finally the url query parameters.\n * \n * @param options\n *          authScheme: Expected scheme when JWT can be found in HTTP Authorize header. Default is JWT. \n *          tokenBodyField: Field in request body containing token. Default is auth_token.\n *          tokenQueryParameterName: Query parameter name containing the token. Default is auth_token.\n */\n\n\nextractors.versionOneCompatibility = function (options) {\n  var authScheme = options.authScheme || LEGACY_AUTH_SCHEME,\n      bodyField = options.tokenBodyField || 'auth_token',\n      queryParam = options.tokenQueryParameterName || 'auth_token';\n  return function (request) {\n    var authHeaderExtractor = extractors.fromAuthHeaderWithScheme(authScheme);\n    var token = authHeaderExtractor(request);\n\n    if (!token) {\n      var bodyExtractor = extractors.fromBodyField(bodyField);\n      token = bodyExtractor(request);\n    }\n\n    if (!token) {\n      var queryExtractor = extractors.fromUrlQueryParameter(queryParam);\n      token = queryExtractor(request);\n    }\n\n    return token;\n  };\n};\n/**\n * Export the Jwt extraction functions\n */\n\n\nmodule.exports = extractors;","map":null,"metadata":{},"sourceType":"script"}