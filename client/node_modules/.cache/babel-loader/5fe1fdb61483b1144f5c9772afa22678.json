{"ast":null,"code":"'use strict';\n\nconst {\n  isFunc,\n  debugLog,\n  moveFile,\n  promiseCallback,\n  checkAndMakeDir,\n  saveBufferToFile\n} = require('./utilities');\n/**\n * Returns Local function that moves the file to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options - file factory options.\n * @param {Object} fileUploadOptions - middleware options.\n * @returns {Function}\n */\n\n\nconst moveFromTemp = (filePath, options, fileUploadOptions) => (resolve, reject) => {\n  debugLog(fileUploadOptions, `Moving temporary file ${options.tempFilePath} to ${filePath}`);\n  moveFile(options.tempFilePath, filePath, promiseCallback(resolve, reject));\n};\n/**\n * Returns Local function that moves the file from buffer to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options - file factory options.\n * @param {Object} fileUploadOptions - middleware options.\n * @returns {Function}\n */\n\n\nconst moveFromBuffer = (filePath, options, fileUploadOptions) => (resolve, reject) => {\n  debugLog(fileUploadOptions, `Moving uploaded buffer to ${filePath}`);\n  saveBufferToFile(options.buffer, filePath, promiseCallback(resolve, reject));\n};\n\nmodule.exports = (options, fileUploadOptions = {}) => {\n  // see: https://github.com/richardgirges/express-fileupload/issues/14\n  // firefox uploads empty file in case of cache miss when f5ing page.\n  // resulting in unexpected behavior. if there is no file data, the file is invalid.\n  // if (!fileUploadOptions.useTempFiles && !options.buffer.length) return;\n  // Create and return file object.\n  return {\n    name: options.name,\n    data: options.buffer,\n    size: options.size,\n    encoding: options.encoding,\n    tempFilePath: options.tempFilePath,\n    truncated: options.truncated,\n    mimetype: options.mimetype,\n    md5: options.hash,\n    mv: (filePath, callback) => {\n      // Define a propper move function.\n      const moveFunc = fileUploadOptions.useTempFiles ? moveFromTemp(filePath, options, fileUploadOptions) : moveFromBuffer(filePath, options, fileUploadOptions); // Create a folder for a file.\n\n      checkAndMakeDir(fileUploadOptions, filePath); // If callback is passed in, use the callback API, otherwise return a promise.\n\n      return isFunc(callback) ? moveFunc(callback) : new Promise(moveFunc);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}