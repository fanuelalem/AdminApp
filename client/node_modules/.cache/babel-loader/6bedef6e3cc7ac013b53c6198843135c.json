{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar http = require('http'),\n    IncomingMessageExt = require('../http/request'),\n    AuthenticationError = require('../errors/authenticationerror');\n/**\n * Authenticates requests.\n *\n * Applies the `name`ed strategy (or strategies) to the incoming request, in\n * order to authenticate the request.  If authentication is successful, the user\n * will be logged in and populated at `req.user` and a session will be\n * established by default.  If authentication fails, an unauthorized response\n * will be sent.\n *\n * Options:\n *   - `session`          Save login state in session, defaults to _true_\n *   - `successRedirect`  After successful login, redirect to given URL\n *   - `successMessage`   True to store success message in\n *                        req.session.messages, or a string to use as override\n *                        message for success.\n *   - `successFlash`     True to flash success messages or a string to use as a flash\n *                        message for success (overrides any from the strategy itself).\n *   - `failureRedirect`  After failed login, redirect to given URL\n *   - `failureMessage`   True to store failure message in\n *                        req.session.messages, or a string to use as override\n *                        message for failure.\n *   - `failureFlash`     True to flash failure messages or a string to use as a flash\n *                        message for failures (overrides any from the strategy itself).\n *   - `assignProperty`   Assign the object provided by the verify callback to given property\n *\n * An optional `callback` can be supplied to allow the application to override\n * the default manner in which authentication attempts are handled.  The\n * callback has the following signature, where `user` will be set to the\n * authenticated user on a successful authentication attempt, or `false`\n * otherwise.  An optional `info` argument will be passed, containing additional\n * details provided by the strategy's verify callback - this could be information about\n * a successful authentication or a challenge message for a failed authentication.\n * An optional `status` argument will be passed when authentication fails - this could\n * be a HTTP response code for a remote authentication failure or similar.\n *\n *     app.get('/protected', function(req, res, next) {\n *       passport.authenticate('local', function(err, user, info, status) {\n *         if (err) { return next(err) }\n *         if (!user) { return res.redirect('/signin') }\n *         res.redirect('/account');\n *       })(req, res, next);\n *     });\n *\n * Note that if a callback is supplied, it becomes the application's\n * responsibility to log-in the user, establish a session, and otherwise perform\n * the desired operations.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' });\n *\n *     passport.authenticate('basic', { session: false });\n *\n *     passport.authenticate('twitter');\n *\n * @param {Strategy|String|Array} name\n * @param {Object} options\n * @param {Function} callback\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = function authenticate(passport, name, options, callback) {\n  if (typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var multi = true; // Cast `name` to an array, allowing authentication to pass through a chain of\n  // strategies.  The first strategy to succeed, redirect, or error will halt\n  // the chain.  Authentication failures will proceed through each strategy in\n  // series, ultimately failing if all strategies fail.\n  //\n  // This is typically used on API endpoints to allow clients to authenticate\n  // using their preferred choice of Basic, Digest, token-based schemes, etc.\n  // It is not feasible to construct a chain of multiple strategies that involve\n  // redirection (for example both Facebook and Twitter), since the first one to\n  // redirect will halt the chain.\n\n  if (!Array.isArray(name)) {\n    name = [name];\n    multi = false;\n  }\n\n  return function authenticate(req, res, next) {\n    if (http.IncomingMessage.prototype.logIn && http.IncomingMessage.prototype.logIn !== IncomingMessageExt.logIn) {\n      require('../framework/connect').__monkeypatchNode();\n    } // accumulator for failures from each strategy in the chain\n\n\n    var failures = [];\n\n    function allFailed() {\n      if (callback) {\n        if (!multi) {\n          return callback(null, false, failures[0].challenge, failures[0].status);\n        } else {\n          var challenges = failures.map(function (f) {\n            return f.challenge;\n          });\n          var statuses = failures.map(function (f) {\n            return f.status;\n          });\n          return callback(null, false, challenges, statuses);\n        }\n      } // Strategies are ordered by priority.  For the purpose of flashing a\n      // message, the first failure will be displayed.\n\n\n      var failure = failures[0] || {},\n          challenge = failure.challenge || {},\n          msg;\n\n      if (options.failureFlash) {\n        var flash = options.failureFlash;\n\n        if (typeof flash == 'string') {\n          flash = {\n            type: 'error',\n            message: flash\n          };\n        }\n\n        flash.type = flash.type || 'error';\n        var type = flash.type || challenge.type || 'error';\n        msg = flash.message || challenge.message || challenge;\n\n        if (typeof msg == 'string') {\n          req.flash(type, msg);\n        }\n      }\n\n      if (options.failureMessage) {\n        msg = options.failureMessage;\n\n        if (typeof msg == 'boolean') {\n          msg = challenge.message || challenge;\n        }\n\n        if (typeof msg == 'string') {\n          req.session.messages = req.session.messages || [];\n          req.session.messages.push(msg);\n        }\n      }\n\n      if (options.failureRedirect) {\n        return res.redirect(options.failureRedirect);\n      } // When failure handling is not delegated to the application, the default\n      // is to respond with 401 Unauthorized.  Note that the WWW-Authenticate\n      // header will be set according to the strategies in use (see\n      // actions#fail).  If multiple strategies failed, each of their challenges\n      // will be included in the response.\n\n\n      var rchallenge = [],\n          rstatus,\n          status;\n\n      for (var j = 0, len = failures.length; j < len; j++) {\n        failure = failures[j];\n        challenge = failure.challenge;\n        status = failure.status;\n        rstatus = rstatus || status;\n\n        if (typeof challenge == 'string') {\n          rchallenge.push(challenge);\n        }\n      }\n\n      res.statusCode = rstatus || 401;\n\n      if (res.statusCode == 401 && rchallenge.length) {\n        res.setHeader('WWW-Authenticate', rchallenge);\n      }\n\n      if (options.failWithError) {\n        return next(new AuthenticationError(http.STATUS_CODES[res.statusCode], rstatus));\n      }\n\n      res.end(http.STATUS_CODES[res.statusCode]);\n    }\n\n    (function attempt(i) {\n      var layer = name[i]; // If no more strategies exist in the chain, authentication has failed.\n\n      if (!layer) {\n        return allFailed();\n      } // Get the strategy, which will be used as prototype from which to create\n      // a new instance.  Action functions will then be bound to the strategy\n      // within the context of the HTTP request/response pair.\n\n\n      var strategy, prototype;\n\n      if (typeof layer.authenticate == 'function') {\n        strategy = layer;\n      } else {\n        prototype = passport._strategy(layer);\n\n        if (!prototype) {\n          return next(new Error('Unknown authentication strategy \"' + layer + '\"'));\n        }\n\n        strategy = Object.create(prototype);\n      } // ----- BEGIN STRATEGY AUGMENTATION -----\n      // Augment the new strategy instance with action functions.  These action\n      // functions are bound via closure the the request/response pair.  The end\n      // goal of the strategy is to invoke *one* of these action methods, in\n      // order to indicate successful or failed authentication, redirect to a\n      // third-party identity provider, etc.\n\n      /**\n       * Authenticate `user`, with optional `info`.\n       *\n       * Strategies should call this function to successfully authenticate a\n       * user.  `user` should be an object supplied by the application after it\n       * has been given an opportunity to verify credentials.  `info` is an\n       * optional argument containing additional user information.  This is\n       * useful for third-party authentication strategies to pass profile\n       * details.\n       *\n       * @param {Object} user\n       * @param {Object} info\n       * @api public\n       */\n\n\n      strategy.success = function (user, info) {\n        if (callback) {\n          return callback(null, user, info);\n        }\n\n        info = info || {};\n        var msg;\n\n        if (options.successFlash) {\n          var flash = options.successFlash;\n\n          if (typeof flash == 'string') {\n            flash = {\n              type: 'success',\n              message: flash\n            };\n          }\n\n          flash.type = flash.type || 'success';\n          var type = flash.type || info.type || 'success';\n          msg = flash.message || info.message || info;\n\n          if (typeof msg == 'string') {\n            req.flash(type, msg);\n          }\n        }\n\n        if (options.successMessage) {\n          msg = options.successMessage;\n\n          if (typeof msg == 'boolean') {\n            msg = info.message || info;\n          }\n\n          if (typeof msg == 'string') {\n            req.session.messages = req.session.messages || [];\n            req.session.messages.push(msg);\n          }\n        }\n\n        if (options.assignProperty) {\n          req[options.assignProperty] = user;\n          return next();\n        }\n\n        req.logIn(user, options, function (err) {\n          if (err) {\n            return next(err);\n          }\n\n          function complete() {\n            if (options.successReturnToOrRedirect) {\n              var url = options.successReturnToOrRedirect;\n\n              if (req.session && req.session.returnTo) {\n                url = req.session.returnTo;\n                delete req.session.returnTo;\n              }\n\n              return res.redirect(url);\n            }\n\n            if (options.successRedirect) {\n              return res.redirect(options.successRedirect);\n            }\n\n            next();\n          }\n\n          if (options.authInfo !== false) {\n            passport.transformAuthInfo(info, req, function (err, tinfo) {\n              if (err) {\n                return next(err);\n              }\n\n              req.authInfo = tinfo;\n              complete();\n            });\n          } else {\n            complete();\n          }\n        });\n      };\n      /**\n       * Fail authentication, with optional `challenge` and `status`, defaulting\n       * to 401.\n       *\n       * Strategies should call this function to fail an authentication attempt.\n       *\n       * @param {String} challenge\n       * @param {Number} status\n       * @api public\n       */\n\n\n      strategy.fail = function (challenge, status) {\n        if (typeof challenge == 'number') {\n          status = challenge;\n          challenge = undefined;\n        } // push this failure into the accumulator and attempt authentication\n        // using the next strategy\n\n\n        failures.push({\n          challenge: challenge,\n          status: status\n        });\n        attempt(i + 1);\n      };\n      /**\n       * Redirect to `url` with optional `status`, defaulting to 302.\n       *\n       * Strategies should call this function to redirect the user (via their\n       * user agent) to a third-party website for authentication.\n       *\n       * @param {String} url\n       * @param {Number} status\n       * @api public\n       */\n\n\n      strategy.redirect = function (url, status) {\n        // NOTE: Do not use `res.redirect` from Express, because it can't decide\n        //       what it wants.\n        //\n        //       Express 2.x: res.redirect(url, status)\n        //       Express 3.x: res.redirect(status, url) -OR- res.redirect(url, status)\n        //         - as of 3.14.0, deprecated warnings are issued if res.redirect(url, status)\n        //           is used\n        //       Express 4.x: res.redirect(status, url)\n        //         - all versions (as of 4.8.7) continue to accept res.redirect(url, status)\n        //           but issue deprecated versions\n        res.statusCode = status || 302;\n        res.setHeader('Location', url);\n        res.setHeader('Content-Length', '0');\n        res.end();\n      };\n      /**\n       * Pass without making a success or fail decision.\n       *\n       * Under most circumstances, Strategies should not need to call this\n       * function.  It exists primarily to allow previous authentication state\n       * to be restored, for example from an HTTP session.\n       *\n       * @api public\n       */\n\n\n      strategy.pass = function () {\n        next();\n      };\n      /**\n       * Internal error while performing authentication.\n       *\n       * Strategies should call this function when an internal error occurs\n       * during the process of performing authentication; for example, if the\n       * user directory is not available.\n       *\n       * @param {Error} err\n       * @api public\n       */\n\n\n      strategy.error = function (err) {\n        if (callback) {\n          return callback(err);\n        }\n\n        next(err);\n      }; // ----- END STRATEGY AUGMENTATION -----\n\n\n      strategy.authenticate(req, options);\n    })(0); // attempt\n\n  };\n};","map":null,"metadata":{},"sourceType":"script"}