{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy'),\n    util = require('util'),\n    lookup = require('./utils').lookup;\n/**\n * `Strategy` constructor.\n *\n * The local authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications must supply a `verify` callback which accepts `username` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *   - `usernameField`  field name where the username is found, defaults to _username_\n *   - `passwordField`  field name where the password is found, defaults to _password_\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new LocalStrategy(\n *       function(username, password, done) {\n *         User.findOne({ username: username, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\n\n\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n\n  if (!verify) {\n    throw new TypeError('LocalStrategy requires a verify callback');\n  }\n\n  this._usernameField = options.usernameField || 'username';\n  this._passwordField = options.passwordField || 'password';\n  passport.Strategy.call(this);\n  this.name = 'local';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n/**\n * Inherit from `passport.Strategy`.\n */\n\n\nutil.inherits(Strategy, passport.Strategy);\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\n\nStrategy.prototype.authenticate = function (req, options) {\n  options = options || {};\n  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);\n  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);\n\n  if (!username || !password) {\n    return this.fail({\n      message: options.badRequestMessage || 'Missing credentials'\n    }, 400);\n  }\n\n  var self = this;\n\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n\n    if (!user) {\n      return self.fail(info);\n    }\n\n    self.success(user, info);\n  }\n\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, username, password, verified);\n    } else {\n      this._verify(username, password, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n/**\n * Expose `Strategy`.\n */\n\n\nmodule.exports = Strategy;","map":null,"metadata":{},"sourceType":"script"}