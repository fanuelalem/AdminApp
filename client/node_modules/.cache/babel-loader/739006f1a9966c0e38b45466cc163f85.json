{"ast":null,"code":"const passport = require('passport');\n\nconst {\n  Strategy: JwtStrategy,\n  ExtractJwt\n} = require('passport-jwt');\n\nconst LocalStrategy = require('passport-local');\n\nconst {\n  secret\n} = require('../config');\n\nconst User = require('../models/User'); // Setup options for JwT\n\n\nconst jwtOptions = {\n  // Look specifically from the header where it's called authorization\n  jwtFromRequest: ExtractJwt.fromHeader('authorization'),\n  secretOrKey: process.env.SECRET || secret\n}; // Create JWT Strategy for handling JWT\n// This strategy is for authenticating users on each request\n\nconst jwtLogin = new JwtStrategy(jwtOptions, async (payload, done) => {\n  // See if the user ID in the payload exists in our database\n  //  If it does, call 'done' with that user\n  //  otherwise, call done without a user object\n  // { sub: user._id , iat: timeStamp }\n  try {\n    const user = await User.findById(payload.sub).select('-password');\n\n    if (!user) {\n      return done(null, false);\n    }\n\n    return done(null, user);\n  } catch (e) {\n    return done(e, false);\n  }\n}); // By default LocalStrategy is looking for username\n// However we are not using username, we are using an email address\n// So here we are saying, if you're looking for the username,\n// look for the email property from the request instead\n\nconst localOptions = {\n  usernameField: 'email'\n}; // Create LocalStrategy for users to sign in using email and password\n\nconst localLogin = new LocalStrategy(localOptions, async (email, password, done) => {\n  try {\n    // See if there's a user with this email\n    const user = await User.findOne({\n      email\n    }); // If no user with this email, we pass null as there's no error\n    // We pass false as a 2nd arg because we didn't find a user\n\n    if (!user) {\n      return done(null, false);\n    } // Compare the password given to the encrypted password in the database\n\n\n    const isMatch = await user.comparePassword(password);\n\n    if (!isMatch) {\n      return done(null, false);\n    } // If we do find a match, return done with no error and the user we found\n\n\n    return done(null, user);\n  } catch (e) {\n    return done(e);\n  }\n}); // Let's passport know that we have a 'jwt' strategy defined\n\npassport.use(jwtLogin); // Let's passport know that we have a 'local' strategy defined\n\npassport.use(localLogin);","map":null,"metadata":{},"sourceType":"script"}