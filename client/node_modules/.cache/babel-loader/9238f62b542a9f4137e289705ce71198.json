{"ast":null,"code":"/*\n * jwt-simple\n *\n * JSON Web Token encode and decode module for node.js\n *\n * Copyright(c) 2011 Kazuhito Hokamura\n * MIT Licensed\n */\n\n/**\n * module dependencies\n */\nvar crypto = require('crypto');\n/**\n * support algorithm mapping\n */\n\n\nvar algorithmMap = {\n  HS256: 'sha256',\n  HS384: 'sha384',\n  HS512: 'sha512',\n  RS256: 'RSA-SHA256'\n};\n/**\n * Map algorithm to hmac or sign type, to determine which crypto function to use\n */\n\nvar typeMap = {\n  HS256: 'hmac',\n  HS384: 'hmac',\n  HS512: 'hmac',\n  RS256: 'sign'\n};\n/**\n * expose object\n */\n\nvar jwt = module.exports;\n/**\n * version\n */\n\njwt.version = '0.5.6';\n/**\n * Decode jwt\n *\n * @param {Object} token\n * @param {String} key\n * @param {Boolean} [noVerify]\n * @param {String} [algorithm]\n * @return {Object} payload\n * @api public\n */\n\njwt.decode = function jwt_decode(token, key, noVerify, algorithm) {\n  // check token\n  if (!token) {\n    throw new Error('No token supplied');\n  } // check segments\n\n\n  var segments = token.split('.');\n\n  if (segments.length !== 3) {\n    throw new Error('Not enough or too many segments');\n  } // All segment should be base64\n\n\n  var headerSeg = segments[0];\n  var payloadSeg = segments[1];\n  var signatureSeg = segments[2]; // base64 decode and parse JSON\n\n  var header = JSON.parse(base64urlDecode(headerSeg));\n  var payload = JSON.parse(base64urlDecode(payloadSeg));\n\n  if (!noVerify) {\n    if (!algorithm && /BEGIN( RSA)? PUBLIC KEY/.test(key.toString())) {\n      algorithm = 'RS256';\n    }\n\n    var signingMethod = algorithmMap[algorithm || header.alg];\n    var signingType = typeMap[algorithm || header.alg];\n\n    if (!signingMethod || !signingType) {\n      throw new Error('Algorithm not supported');\n    } // verify signature. `sign` will return base64 string.\n\n\n    var signingInput = [headerSeg, payloadSeg].join('.');\n\n    if (!verify(signingInput, key, signingMethod, signingType, signatureSeg)) {\n      throw new Error('Signature verification failed');\n    } // Support for nbf and exp claims.\n    // According to the RFC, they should be in seconds.\n\n\n    if (payload.nbf && Date.now() < payload.nbf * 1000) {\n      throw new Error('Token not yet active');\n    }\n\n    if (payload.exp && Date.now() > payload.exp * 1000) {\n      throw new Error('Token expired');\n    }\n  }\n\n  return payload;\n};\n/**\n * Encode jwt\n *\n * @param {Object} payload\n * @param {String} key\n * @param {String} algorithm\n * @param {Object} options\n * @return {String} token\n * @api public\n */\n\n\njwt.encode = function jwt_encode(payload, key, algorithm, options) {\n  // Check key\n  if (!key) {\n    throw new Error('Require key');\n  } // Check algorithm, default is HS256\n\n\n  if (!algorithm) {\n    algorithm = 'HS256';\n  }\n\n  var signingMethod = algorithmMap[algorithm];\n  var signingType = typeMap[algorithm];\n\n  if (!signingMethod || !signingType) {\n    throw new Error('Algorithm not supported');\n  } // header, typ is fixed value.\n\n\n  var header = {\n    typ: 'JWT',\n    alg: algorithm\n  };\n\n  if (options && options.header) {\n    assignProperties(header, options.header);\n  } // create segments, all segments should be base64 string\n\n\n  var segments = [];\n  segments.push(base64urlEncode(JSON.stringify(header)));\n  segments.push(base64urlEncode(JSON.stringify(payload)));\n  segments.push(sign(segments.join('.'), key, signingMethod, signingType));\n  return segments.join('.');\n};\n/**\n * private util functions\n */\n\n\nfunction assignProperties(dest, source) {\n  for (var attr in source) {\n    if (source.hasOwnProperty(attr)) {\n      dest[attr] = source[attr];\n    }\n  }\n}\n\nfunction verify(input, key, method, type, signature) {\n  if (type === \"hmac\") {\n    return signature === sign(input, key, method, type);\n  } else if (type == \"sign\") {\n    return crypto.createVerify(method).update(input).verify(key, base64urlUnescape(signature), 'base64');\n  } else {\n    throw new Error('Algorithm type not recognized');\n  }\n}\n\nfunction sign(input, key, method, type) {\n  var base64str;\n\n  if (type === \"hmac\") {\n    base64str = crypto.createHmac(method, key).update(input).digest('base64');\n  } else if (type == \"sign\") {\n    base64str = crypto.createSign(method).update(input).sign(key, 'base64');\n  } else {\n    throw new Error('Algorithm type not recognized');\n  }\n\n  return base64urlEscape(base64str);\n}\n\nfunction base64urlDecode(str) {\n  return Buffer.from(base64urlUnescape(str), 'base64').toString();\n}\n\nfunction base64urlUnescape(str) {\n  str += new Array(5 - str.length % 4).join('=');\n  return str.replace(/\\-/g, '+').replace(/_/g, '/');\n}\n\nfunction base64urlEncode(str) {\n  return base64urlEscape(Buffer.from(str).toString('base64'));\n}\n\nfunction base64urlEscape(str) {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}","map":null,"metadata":{},"sourceType":"script"}