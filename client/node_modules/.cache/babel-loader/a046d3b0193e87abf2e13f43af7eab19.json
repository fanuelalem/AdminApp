{"ast":null,"code":"var jsencoding = require('../deps/encoding/encoding');\n\nvar RE_ENCODED = /%([a-fA-F0-9]{2})/g;\n\nfunction encodedReplacer(match, byte) {\n  return String.fromCharCode(parseInt(byte, 16));\n}\n\nfunction parseParams(str) {\n  var res = [],\n      state = 'key',\n      charset = '',\n      inquote = false,\n      escaping = false,\n      p = 0,\n      tmp = '';\n\n  for (var i = 0, len = str.length; i < len; ++i) {\n    if (str[i] === '\\\\' && inquote) {\n      if (escaping) escaping = false;else {\n        escaping = true;\n        continue;\n      }\n    } else if (str[i] === '\"') {\n      if (!escaping) {\n        if (inquote) {\n          inquote = false;\n          state = 'key';\n        } else inquote = true;\n\n        continue;\n      } else escaping = false;\n    } else {\n      if (escaping && inquote) tmp += '\\\\';\n      escaping = false;\n\n      if ((state === 'charset' || state === 'lang') && str[i] === \"'\") {\n        if (state === 'charset') {\n          state = 'lang';\n          charset = tmp.substring(1);\n        } else state = 'value';\n\n        tmp = '';\n        continue;\n      } else if (state === 'key' && (str[i] === '*' || str[i] === '=') && res.length) {\n        if (str[i] === '*') state = 'charset';else state = 'value';\n        res[p] = [tmp, undefined];\n        tmp = '';\n        continue;\n      } else if (!inquote && str[i] === ';') {\n        state = 'key';\n\n        if (charset) {\n          if (tmp.length) {\n            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), 'binary', charset);\n          }\n\n          charset = '';\n        }\n\n        if (res[p] === undefined) res[p] = tmp;else res[p][1] = tmp;\n        tmp = '';\n        ++p;\n        continue;\n      } else if (!inquote && (str[i] === ' ' || str[i] === '\\t')) continue;\n    }\n\n    tmp += str[i];\n  }\n\n  if (charset && tmp.length) {\n    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), 'binary', charset);\n  }\n\n  if (res[p] === undefined) {\n    if (tmp) res[p] = tmp;\n  } else res[p][1] = tmp;\n\n  return res;\n}\n\n;\nexports.parseParams = parseParams;\n\nfunction decodeText(text, textEncoding, destEncoding) {\n  var ret;\n\n  if (text && jsencoding.encodingExists(destEncoding)) {\n    try {\n      ret = jsencoding.TextDecoder(destEncoding).decode(Buffer.from(text, textEncoding));\n    } catch (e) {}\n  }\n\n  return typeof ret === 'string' ? ret : text;\n}\n\nexports.decodeText = decodeText;\nvar HEX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    RE_PLUS = /\\+/g;\n\nfunction Decoder() {\n  this.buffer = undefined;\n}\n\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ');\n  var res = '';\n  var i = 0,\n      p = 0,\n      len = str.length;\n\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer;\n        this.buffer = undefined;\n        --i; // retry character\n      } else {\n        this.buffer += str[i];\n        ++p;\n\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16));\n          this.buffer = undefined;\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i);\n        p = i;\n      }\n\n      this.buffer = '';\n      ++p;\n    }\n  }\n\n  if (p < len && this.buffer === undefined) res += str.substring(p);\n  return res;\n};\n\nDecoder.prototype.reset = function () {\n  this.buffer = undefined;\n};\n\nexports.Decoder = Decoder;\n\nfunction basename(path) {\n  if (typeof path !== 'string') return '';\n\n  for (var i = path.length - 1; i >= 0; --i) {\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n\n      case 0x5C:\n        // '\\'\n        path = path.slice(i + 1);\n        return path === '..' || path === '.' ? '' : path;\n    }\n  }\n\n  return path === '..' || path === '.' ? '' : path;\n}\n\nexports.basename = basename;","map":null,"metadata":{},"sourceType":"script"}