{"ast":null,"code":"var _jsxFileName = \"/Users/fanuelalem/pro3/Project-3/client/src/containers/Uploads/index.js\";\nimport React, { Component } from 'react';\nimport { getUserUploads } from '../../actions/stocks';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Grid, Divider, Header, Form, Segment, Message, List, Pagination, Button, Icon } from 'semantic-ui-react';\nimport FormContainer from './../searchForm/formContainer/index';\nimport { compose } from 'redux';\nimport { Helmet } from 'react-helmet';\nimport { getUserData, getOtherUsers } from './../../actions/profile';\nimport axios from 'axios'; // import UserTodoListItems from './userWatchListItem';\n// import requireAuth from '../../hoc/requireAuth';\n\nimport { getUserTodos, updateTodoCompletedById, deleteTodoById } from '../../actions/stocks';\nimport { ADD_TODO_ERROR, ADD_TODO } from '../../actions/types';\n\nclass Uploads extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = async (formValues, dispatch) => {\n      console.log(formValues, 'dcsdc');\n\n      try {\n        await axios.post('/api/user/upload', formValues, {\n          headers: {\n            'authorization': localStorage.getItem('token')\n          }\n        });\n        dispatch({\n          type: ADD_TODO\n        });\n        this.props.getUserUploads();\n      } catch (e) {\n        dispatch({\n          type: ADD_TODO_ERROR,\n          payload: e\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUserUploads();\n  }\n\n  render() {\n    const {\n      handleSubmit\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '100px 45px 0 45px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '0 25px 34px 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 3\n      }\n    }, \"My WatchList \")), /*#__PURE__*/React.createElement(\"form\", {\n      size: \"large\",\n      method: \"POST\",\n      onSubmit: handleSubmit(this.onSubmit),\n      encType: \"multipart/form-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      style: {\n        margin: '0 0 25px 430px'\n      },\n      type: \"file\",\n      name: \"file\" //  id='file'\n      ,\n      className: \"customer-file-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fluid: true,\n      color: \"purple\",\n      content: \"add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 10\n      }\n    }))), /*#__PURE__*/React.createElement(List, {\n      animated: true,\n      divided: true,\n      selection: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }\n    }), this.props.uploads.length <= 9 ? null : /*#__PURE__*/React.createElement(Pagination, {\n      pointing: true,\n      secondary: true,\n      totalPages: Math.ceil(this.props.todos.length / 10),\n      onPageChange: (event, data) => this.handlePageChange(event, data),\n      activePage: this.state.activePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 12\n      }\n    })));\n  }\n\n}\n\nfunction mapStateToProps({\n  uploads: {\n    userUploads,\n    getUserTodosServerError,\n    getUserTodosClientError,\n    deleteTodoByIdError\n  }\n}) {\n  return {\n    uploads: userUploads,\n    clientError: getUserTodosClientError,\n    serverError: getUserTodosServerError,\n    deleteTodoByIdError\n  };\n}\n\nexport default compose(reduxForm({\n  form: 'addTodo'\n}), connect(mapStateToProps, {\n  getUserUploads,\n  updateTodoCompletedById,\n  deleteTodoById,\n  getUserData,\n  getOtherUsers\n}))(Uploads);","map":{"version":3,"sources":["/Users/fanuelalem/pro3/Project-3/client/src/containers/Uploads/index.js"],"names":["React","Component","getUserUploads","reduxForm","Field","connect","Grid","Divider","Header","Form","Segment","Message","List","Pagination","Button","Icon","FormContainer","compose","Helmet","getUserData","getOtherUsers","axios","getUserTodos","updateTodoCompletedById","deleteTodoById","ADD_TODO_ERROR","ADD_TODO","Uploads","onSubmit","formValues","dispatch","console","log","post","headers","localStorage","getItem","type","props","e","payload","componentDidMount","render","handleSubmit","margin","padding","color","uploads","length","Math","ceil","todos","event","data","handlePageChange","state","activePage","mapStateToProps","userUploads","getUserTodosServerError","getUserTodosClientError","deleteTodoByIdError","clientError","serverError","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { getUserUploads} from '../../actions/stocks';import { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Grid,Divider,Header, Form, Segment, Message, List, Pagination, Button, Icon } from 'semantic-ui-react';\nimport FormContainer from './../searchForm/formContainer/index'\nimport { compose } from 'redux';\nimport { Helmet } from 'react-helmet';\nimport { getUserData, getOtherUsers } from './../../actions/profile';\n\n\n  \nimport axios from 'axios';\n\n// import UserTodoListItems from './userWatchListItem';\n\n// import requireAuth from '../../hoc/requireAuth';\n\n\nimport { getUserTodos, updateTodoCompletedById, deleteTodoById } from '../../actions/stocks';\n\nimport { ADD_TODO_ERROR, ADD_TODO} from '../../actions/types';\n\n\nclass Uploads extends Component {\n\n    componentDidMount() {\n        this.props.getUserUploads();\n      }\n\n      onSubmit = async (formValues,dispatch) => {\n    console.log(formValues,'dcsdc')\n        try {\n        await axios.post('/api/user/upload', formValues, { headers: { 'authorization': localStorage.getItem('token')}} );\n        dispatch({ type: ADD_TODO });\n        this.props.getUserUploads();\n      } catch (e) {\n        dispatch({ type: ADD_TODO_ERROR, payload: e });\n      }\n    }\n\n \n    render() {\n        const {handleSubmit} = this.props;\n\n        return (\n            <div style={{margin:'100px 45px 0 45px'}}>\n\n<div style={{padding:'0 25px 34px 0'}}>\n\n \n<Header as=\"h2\"  textAlign=\"center\" >\n  <p style={{color:'white'}}>My WatchList </p> \n</Header>\n   <form size='large' method='POST' onSubmit={handleSubmit(this.onSubmit)} encType='multipart/form-data'>\n       <Segment   >\n         {/* <Field\n         name=\"text\"\n         component={this.renderAddTodo}\n         /> */}\n         <input\n         style={{margin:'0 0 25px 430px'}}\n         type='file'\n         name='file'\n        //  id='file'\n         className='customer-file-input'>\n         </input>\n         <Button\n         type='submit'\n         fluid\n         color='purple'\n         content='add'\n         />\n       </Segment>\n       </form>\n       <List animated divided selection >\n         {/* <UserTodoListItems \n         todos={this.props.todos.slice(this.state.start,this.state.end)}\n         handleUpdate={this.props.updateTodoCompletedById}\n         handleDelete={this.props.deleteTodoById}\n         /> */}\n       </List>\n       {\n         this.props.uploads.length <= 9 ? \n         null\n         : <Pagination\n         pointing\n         secondary\n         totalPages={Math.ceil(this.props.todos.length / 10)}\n         onPageChange={(event,data)=> this.handlePageChange(event,data)}\n         activePage={this.state.activePage}\n         />\n       }       \n</div>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps({ uploads: { userUploads, getUserTodosServerError, getUserTodosClientError, deleteTodoByIdError}}) {\n    return {\n      uploads: userUploads,\n      clientError: getUserTodosClientError,\n      serverError: getUserTodosServerError,\n      deleteTodoByIdError,\n    };\n  }\n   export default compose(\n    reduxForm({ form: 'addTodo' }),\n    connect(mapStateToProps, { getUserUploads,updateTodoCompletedById, deleteTodoById,getUserData, getOtherUsers })\n  )(Uploads);"]},"metadata":{},"sourceType":"module"}