{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFileList = isFileList;\nexports[\"default\"] = void 0;\n\nvar _validators = _interopRequireDefault(require(\"./validators\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ACCEPT_SEP_REG = ',';\nvar file = (0, _helpers.memoize)(function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      message = _ref.message,\n      msg = _ref.msg,\n      accept = _ref.accept,\n      minSize = _ref.minSize,\n      maxSize = _ref.maxSize,\n      minFiles = _ref.minFiles,\n      maxFiles = _ref.maxFiles,\n      ifCond = _ref[\"if\"],\n      unless = _ref.unless,\n      allowBlank = _ref.allowBlank;\n\n  msg = msg || message;\n  minFiles = (0, _helpers.selectNum)(minFiles);\n  maxFiles = (0, _helpers.selectNum)(maxFiles);\n\n  if (maxFiles < 0) {\n    maxFiles = null;\n  }\n\n  if (minFiles === null) {\n    minFiles = 1;\n  }\n\n  if (typeof accept === 'string' && accept.trim()) {\n    accept = accept.trim().toLowerCase().split(ACCEPT_SEP_REG).map(function (type) {\n      type = type.trim();\n      return type.charAt(0) === '.' || type.indexOf('*') < 0 ? type : (0, _helpers.stringToReg)(type);\n    });\n  } else {\n    accept = null;\n  }\n\n  var min = minSize != null ? sizeToInt(minSize) : null;\n  var max = maxSize != null ? sizeToInt(maxSize) : null;\n  return (0, _helpers.prepare)(ifCond, unless, false, function (value) {\n    var isAFileList = isFileList(value); // special blank check\n\n    if ((allowBlank != null ? allowBlank : _validators[\"default\"].defaultOptions.allowBlank) && (typeof value === 'string' ? value.trim() === '' : isAFileList && value.length === 0)) {\n      return;\n    }\n\n    if (!isAFileList) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'file'));\n    }\n\n    if (isNaN(value.length)) {\n      value = [value];\n    }\n\n    if (value.length < minFiles) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooFew', 'tooFew', 'minFiles', {\n        count: minFiles\n      }));\n    }\n\n    if (maxFiles !== null && value.length > maxFiles) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooMany', 'tooMany', 'maxFiles', {\n        count: maxFiles\n      }));\n    }\n\n    var acceptError = [];\n    var tooSmallError = [];\n    var tooBigError = [];\n\n    var _loop = function _loop(i, len, _val, _ftype, _fext) {\n      _val = value[i];\n\n      if (accept) {\n        _ftype = _val.type ||\n        /* istanbul ignore next */\n        '';\n        _fext = fileExt(_val.name ||\n        /* istanbul ignore next */\n        '');\n\n        if (!accept.some(function (type) {\n          val = _val;\n          ftype = _ftype;\n          fext = _fext;\n          return typeof type === 'string' ? type === (type.charAt(0) === '.' ? _fext : _ftype) : type.test(_ftype);\n        })) {\n          acceptError.push(_val);\n        }\n      }\n\n      if (min != null && _val.size < min) {\n        tooSmallError.push(_val);\n      }\n\n      if (max != null && _val.size > max) {\n        tooBigError.push(_val);\n      }\n\n      val = _val;\n      ftype = _ftype;\n      fext = _fext;\n    };\n\n    for (var i = 0, len = value.length, val, ftype, fext; i < len; ++i) {\n      _loop(i, len, val, ftype, fext);\n    }\n\n    if (acceptError.length) {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'fileAccept', 'accept', {\n        files: acceptError,\n        count: acceptError.length\n      }));\n    }\n\n    if (tooSmallError.length) {\n      var pair = parse(minSize);\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooSmall', 'tooSmall', 'minSize', {\n        files: tooSmallError,\n        count: tooSmallError.length,\n        size: _validators[\"default\"].formatSize(pair[1], pair[2] || 'B')\n      }));\n    }\n\n    if (tooBigError.length) {\n      var _pair = parse(maxSize);\n\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooBig', 'tooBig', 'maxSize', {\n        files: tooBigError,\n        count: tooBigError.length,\n        size: _validators[\"default\"].formatSize(_pair[1], _pair[2] || 'B')\n      }));\n    }\n  });\n});\nvar _default = file;\nexports[\"default\"] = _default;\n\nfunction isFileList(value) {\n  if (typeof FileList !== 'undefined' && value instanceof FileList || typeof File !== 'undefined' && (value instanceof File || value[0] instanceof File)) {\n    return true;\n  }\n\n  var str = _helpers.TO_STRING.call(value);\n\n  return str === '[object FileList]' || str === '[object File]' || _helpers.TO_STRING.call(value[0]) === '[object File]';\n} // private\n// eslint-disable-next-line no-useless-escape\n\n\nvar SIZE_REG = /^([\\d\\.]+)\\s*([KMGTPE]?B)?$/;\nvar SIZE_UNITS = {\n  B: 1,\n  KB: 1024,\n  MB: 1048576,\n  GB: 1073741824,\n  TB: 1099511627776,\n  PB: 1125899906842624,\n  EB: 1152921504606847000\n};\n\nfunction parse(size) {\n  return SIZE_REG.exec(('' + size).trim());\n}\n\nfunction sizeToInt(size) {\n  var pair = parse(size);\n  if (pair) return pair[1] * (SIZE_UNITS[pair[2]] || 1);\n  /* istanbul ignore else */\n\n  if (typeof console !== 'undefined') {\n    console.error(\"file validator: size \\\"\".concat(size, \"\\\" unknown\"));\n  }\n\n  return null;\n}\n\nfunction fileExt(filename) {\n  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 1).toLowerCase();\n}","map":null,"metadata":{},"sourceType":"script"}