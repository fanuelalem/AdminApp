{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _validators = _interopRequireDefault(require(\"./validators\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DATE_METHODS = {\n  y: function y(d) {\n    return d.getFullYear();\n  },\n  m: function m(d) {\n    return d.getMonth() + 1;\n  },\n  d: function d(_d) {\n    return _d.getDate();\n  }\n};\nvar PARSE_REG = /(y+|m+|d+)/g;\nvar TO_STRING = {}.toString;\nvar date = (0, _helpers.memoize)(function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      format = _ref.format,\n      ymd = _ref.ymd,\n      eq = _ref['='],\n      diff = _ref['!='],\n      gt = _ref['>'],\n      gte = _ref['>='],\n      lt = _ref['<'],\n      lte = _ref['<='],\n      message = _ref.message,\n      msg = _ref.msg,\n      ifCond = _ref[\"if\"],\n      unless = _ref.unless,\n      allowBlank = _ref.allowBlank;\n\n  msg = msg || message;\n  return (0, _helpers.prepare)(ifCond, unless, allowBlank, function (value) {\n    var normFormat = normalizeFormat(format, ymd);\n    var date = normParseDate(value, normFormat, false);\n\n    if (date === 'wrongFormat') {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateFormat', 'format', {\n        format: format\n      }));\n    }\n\n    if (date === 'invalid') {\n      return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateInvalid', 'invalid'));\n    }\n\n    if (date) {\n      var date2;\n\n      if (eq && +date !== +(date2 = getDate(eq))) {\n        return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateRange', 'range', '=', values('=', date2, normFormat)));\n      }\n\n      if (diff && +date === +(date2 = getDate(diff))) {\n        return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateRange', 'range', '!=', values('!=', date2, normFormat)));\n      }\n\n      if (gt && date <= (date2 = getDate(gt))) {\n        return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateRange', 'range', '>', values('>', date2, normFormat)));\n      }\n\n      if (gte && date < (date2 = getDate(gte))) {\n        return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateRange', 'range', '>=', values('>=', date2, normFormat)));\n      }\n\n      if (lt && date >= (date2 = getDate(lt))) {\n        return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateRange', 'range', '<', values('<', date2, normFormat)));\n      }\n\n      if (lte && date > (date2 = getDate(lte))) {\n        return _validators[\"default\"].formatMessage((0, _helpers.prepareMsg)(msg, 'dateRange', 'range', '<=', values('<=', date2, normFormat)));\n      }\n    }\n  });\n});\ndate.parseDate = parseDate;\ndate.formatDate = formatDate;\nvar _default = date;\nexports[\"default\"] = _default;\n\nfunction parseDate(strDate, format, ymd) {\n  return normParseDate(strDate, normalizeFormat(format, ymd), true);\n}\n\nfunction formatDate(date, format, ymd) {\n  if (!(date instanceof Date) && TO_STRING.call(date) !== '[object Date]') {\n    return null;\n  }\n\n  var t = new Date(date).getTime(); // eslint-disable-next-line no-self-compare\n\n  return t !== t ? null : normFormatDate(date, normalizeFormat(format, ymd));\n}\n\nfunction values(op, date, format) {\n  return {\n    op: op,\n    date: normFormatDate(date, format),\n    dateObject: date\n  };\n}\n\nfunction getDate(d) {\n  if (typeof d === 'function') {\n    return new Date(+d());\n  }\n\n  if (isNaN(d) && ('' + d).toLowerCase() === 'today') {\n    var today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return today;\n  }\n\n  return new Date(+d);\n} // FORMAT\n\n\nfunction normFormatDate(date, format) {\n  return format.replace(PARSE_REG, function (m) {\n    var sym = m.charAt(0);\n    var len = m.length;\n    var padded = padding(DATE_METHODS[sym](date), len);\n    return sym === 'y' ? padded.slice(padded.length - len, padded.length) : padded;\n  });\n}\n\nfunction normalizeFormat(format, ymd) {\n  if (format == null) {\n    format = _validators[\"default\"].defaultOptions.dateFormat;\n  }\n\n  if (!ymd) {\n    ymd = _validators[\"default\"].defaultOptions.dateYmd;\n  }\n\n  if (!ymd || ymd === 'ymd') {\n    return format;\n  }\n\n  var reverseMapping = {};\n  reverseMapping[ymd.charAt(0)] = 'y';\n  reverseMapping[ymd.charAt(1)] = 'm';\n  reverseMapping[ymd.charAt(2)] = 'd';\n  return format.replace(new RegExp(\"[\".concat(ymd, \"]\"), 'g'), function (sym) {\n    return reverseMapping[sym];\n  });\n}\n\nfunction padding(num, pad) {\n  return '0'.repeat(Math.max(0, pad - ('' + num).length)) + num;\n} // PARSE\n\n\nfunction normParseDate(value, format, parse) {\n  var order = [];\n  var reg = new RegExp('^' + format.replace(PARSE_REG, function (m) {\n    order.push(m.charAt(0));\n    return \"([0-9]{\".concat(m.length, \"})\");\n  }) + '$');\n  var match = value.match(reg);\n\n  if (match) {\n    var flags = {};\n    order.forEach(function (token, index) {\n      flags[token] = +match[index + 1];\n    });\n    var comparable = flags.y != null ? flags.m != null ? true : flags.d == null : false;\n    flags = (0, _helpers.assign)({\n      y: 1970,\n      m: 1,\n      d: 1\n    }, flags);\n\n    if (flags.y < 100) {\n      flags.y = currentCentury(flags.y >= 69 ? -1 : 0) * 100 + flags.y;\n    }\n\n    var _date = new Date(flags.y, flags.m - 1, flags.d);\n\n    return checkFlags(_date, flags) ? comparable || parse ? _date : null : parse ? new Date(NaN) : 'invalid';\n  }\n\n  return parse ? new Date(NaN) : 'wrongFormat';\n}\n\nfunction checkFlags(date, flags) {\n  var _ref2 = [date.getFullYear(), date.getMonth() + 1, date.getDate()],\n      year = _ref2[0],\n      month = _ref2[1],\n      day = _ref2[2];\n  return year === flags.y && month === flags.m && day === flags.d;\n}\n\nfunction currentCentury(add) {\n  return (0, _helpers.trunc)(new Date().getFullYear() / 100) + add;\n}","map":null,"metadata":{},"sourceType":"script"}