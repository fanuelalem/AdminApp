{"ast":null,"code":"import { GET_ALL_TODOS, GET_ALL_TODOS_ERROR, GET_USER_TODOS, GET_USER_TODOS_ERROR, UPDATE_TODO_BY_ID_ERROR, DELETE_TODO_BY_ID_ERROR } from '../types';\nimport axios from 'axios';\nexport const getAllTodos = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get('/api/stock');\n    console.log(data);\n    dispatch({\n      type: GET_ALL_TODOS,\n      payload: data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_ALL_TODOS_ERROR,\n      payload: 'Something went wrong, please refresh the page to try again'\n    });\n  }\n};\nexport const getUserTodos = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/stock', {\n      headers: {\n        'authorization': localStorage.getItem('token')\n      }\n    });\n    dispatch({\n      type: GET_USER_TODOS,\n      payload: data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_USER_TODOS_ERROR,\n      serverError: e,\n      userError: 'Please refresh the page and try again'\n    });\n  }\n};\nexport const updateTodoCompletedById = (id, completed, text) => async dispatch => {\n  try {\n    await axios.put(`/api/user/stock/${id}`, {\n      text,\n      completed: !completed\n    }, {\n      headers: {\n        'authorization': localStorage.getItem('token')\n      }\n    });\n    const {\n      data\n    } = await axios.get('/api/user/stock', {\n      headers: {\n        'authorization': localStorage.getItem('token')\n      }\n    });\n    dispatch({\n      type: GET_USER_TODOS,\n      payload: data\n    });\n  } catch (e) {\n    dispatch({\n      type: UPDATE_TODO_BY_ID_ERROR,\n      payload: e\n    });\n  }\n};\nexport const deleteTodoById = id => async dispatch => {\n  try {\n    await axios.delete(`/api/user/stock/${id}`, {\n      headers: {\n        'authorization': localStorage.getItem('token')\n      }\n    });\n    const {\n      data\n    } = await axios.get('/api/user/stock', {\n      headers: {\n        'authorization': localStorage.getItem('token')\n      }\n    });\n    dispatch({\n      type: GET_USER_TODOS,\n      payload: data\n    });\n  } catch (e) {\n    dispatch({\n      type: DELETE_TODO_BY_ID_ERROR,\n      payload: e\n    });\n  }\n};","map":{"version":3,"sources":["/Users/fanuelalem/pro3/Project-3/client/src/actions/stocks/index.js"],"names":["GET_ALL_TODOS","GET_ALL_TODOS_ERROR","GET_USER_TODOS","GET_USER_TODOS_ERROR","UPDATE_TODO_BY_ID_ERROR","DELETE_TODO_BY_ID_ERROR","axios","getAllTodos","dispatch","data","get","console","log","type","payload","e","getUserTodos","headers","localStorage","getItem","serverError","userError","updateTodoCompletedById","id","completed","text","put","deleteTodoById","delete"],"mappings":"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","sourcesContent":[" \n\nimport {\n  GET_ALL_TODOS,\n  GET_ALL_TODOS_ERROR,\n  GET_USER_TODOS,\n  GET_USER_TODOS_ERROR,\n  UPDATE_TODO_BY_ID_ERROR,\n  DELETE_TODO_BY_ID_ERROR,\n} from '../types';\n\n\nimport axios from 'axios';\n\n \n\nexport const getAllTodos = () => async dispatch => {\n  try {\n     const { data } = await axios.get('/api/stock');\n     console.log(data)\n    dispatch({ type: GET_ALL_TODOS, payload: data });\n  } catch (e) {\n    dispatch({ type: GET_ALL_TODOS_ERROR, payload: 'Something went wrong, please refresh the page to try again'})\n  }\n};\n\nexport const getUserTodos = () => async dispatch => {\n  try {\n   const { data } = await axios.get('/api/user/stock', { headers: { 'authorization': localStorage.getItem('token')} } );\n   dispatch({ type: GET_USER_TODOS, payload: data });\n } catch (e) {\n   dispatch({ type: GET_USER_TODOS_ERROR, serverError: e, userError: 'Please refresh the page and try again' });\n }\n};\n\n \n \n\nexport const updateTodoCompletedById = (id, completed, text) => async dispatch => {\n  try {\n    await axios.put(`/api/user/stock/${id}`, {text, completed: !completed }, { headers: { 'authorization': localStorage.getItem('token')} } );\n    const { data } = await axios.get('/api/user/stock', { headers: { 'authorization': localStorage.getItem('token')} } );\n    dispatch({ type: GET_USER_TODOS, payload: data });\n  } catch (e) {\n    dispatch({ type: UPDATE_TODO_BY_ID_ERROR, payload: e });\n  }\n};\n\nexport const deleteTodoById = id => async dispatch => {\n  try {\n    await axios.delete(`/api/user/stock/${id}`, { headers: { 'authorization': localStorage.getItem('token')} } );\n    const { data } = await axios.get('/api/user/stock', { headers: { 'authorization': localStorage.getItem('token')} } );\n    dispatch({ type: GET_USER_TODOS, payload: data });\n  } catch (e) {\n    dispatch({ type: DELETE_TODO_BY_ID_ERROR, payload: e });\n  }\n};\n\n "]},"metadata":{},"sourceType":"module"}