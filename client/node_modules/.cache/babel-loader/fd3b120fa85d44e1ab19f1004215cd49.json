{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst crypto = require('crypto');\n\nconst {\n  debugLog,\n  checkAndMakeDir,\n  getTempFilename,\n  deleteFile\n} = require('./utilities');\n\nmodule.exports = (options, fieldname, filename) => {\n  const dir = path.normalize(options.tempFileDir);\n  const tempFilePath = path.join(dir, getTempFilename());\n  checkAndMakeDir({\n    createParentPath: true\n  }, tempFilePath);\n  debugLog(options, `Temporary file path is ${tempFilePath}`);\n  const hash = crypto.createHash('md5');\n  let fileSize = 0;\n  let completed = false;\n  debugLog(options, `Opening write stream for ${fieldname}->${filename}...`);\n  const writeStream = fs.createWriteStream(tempFilePath);\n  const writePromise = new Promise((resolve, reject) => {\n    writeStream.on('finish', () => resolve());\n    writeStream.on('error', err => {\n      debugLog(options, `Error write temp file: ${err}`);\n      reject(err);\n    });\n  });\n  return {\n    dataHandler: data => {\n      if (completed === true) {\n        debugLog(options, `Error: got ${fieldname}->${filename} data chunk for completed upload!`);\n        return;\n      }\n\n      writeStream.write(data);\n      hash.update(data);\n      fileSize += data.length;\n      debugLog(options, `Uploading ${fieldname}->${filename}, bytes:${fileSize}...`);\n    },\n    getFilePath: () => tempFilePath,\n    getFileSize: () => fileSize,\n    getHash: () => hash.digest('hex'),\n    complete: () => {\n      completed = true;\n      debugLog(options, `Upload ${fieldname}->${filename} completed, bytes:${fileSize}.`);\n      if (writeStream !== false) writeStream.end(); // Return empty buff since data was uploaded into a temp file.\n\n      return Buffer.concat([]);\n    },\n    cleanup: () => {\n      completed = true;\n      debugLog(options, `Cleaning up temporary file ${tempFilePath}...`);\n      writeStream.end();\n      deleteFile(tempFilePath, err => err ? debugLog(options, `Cleaning up temporary file ${tempFilePath} failed: ${err}`) : debugLog(options, `Cleaning up temporary file ${tempFilePath} done.`));\n    },\n    getWritePromise: () => writePromise\n  };\n};","map":null,"metadata":{},"sourceType":"script"}